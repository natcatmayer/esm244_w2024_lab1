---
title: "lab 1"
author: "natalie"
format: 
  html:
    code-fold: true
    toc: true
execute: 
  echo: true
  message: false
  warning: false
editor: visual
---

command option i to create code chunk command shift return to run entire code chunk

```{r setup}
install.packages("sf")
install.packages("tmap")

library(tidyverse)
library(here)
library(sf) #simple features for spatial data
library(tmap)
```

```{r load data}
sfo_trees_df <- read_csv(here('data', 'sfo_trees', 'sfo_trees.csv')) %>%
  janitor:: clean_names()
```

# Part 1: data exploration and wrangling review

## Example 1:

Find counts of observations by 'legal_status', then select the statuses with the five highest tree counts.

### Pseudocode

group by legal status summarize by tree count

### Functional Code

```{r}
sfo_trees_df %>% 
  group_by(legal_status) %>%
  summarize(tree_count = n())

top_5_status <- sfo_trees_df %>%
  filter(!is.na(legal_status)) %>%
  group_by(legal_status) %>%
  summarize(tree_count = n()) %>%
  ungroup() %>%
  slice_max(tree_count, n= 5)

```

make a ggplot of the top 5 observations from above:

```{r}
library(ggplot2)

plot_top5 <- ggplot(top_5_status, aes(x=legal_status, y=tree_count)) + 
  geom_bar(stat = "identity", width=0.9) + 
  theme(axis.text.x = element_text(angle=45, vjust = 0.65), 
        plot.title = element_text(hjust=0.5)) + 
  labs(x= "Legal Status", y= "Number of Trees", title= "Legal Status of San Francisco Trees") + 
  scale_y_continuous(labels = scales::comma_format())
  

casey_top5 <- ggplot(top_5_status, 
                     aes(y= fct_reorder(legal_status, -tree_count), 
                          x=tree_count, fill=legal_status)) + 
  geom_col() + 
  labs(y= "Legal Status", x = "Tree Count") + 
  theme_minimal()
  
```

## Example 2

Only keep observations where legal status is "permitted site" and caretaker is "MTA" or "DPW". Store as "permitted_mta_dpw"

### Pseudocode

filter legal status == permitted site filter caretaker == "MTA" \| "DPW"

### Functional Code

```{r}
permitted_mta_dpw <- sfo_trees_df %>%
  filter(legal_status == "Permitted Site", 
         caretaker == "MTA" | caretaker == "DPW")

another_way <- sfo_trees_df %>%
  filter(legal_status == "Permitted Site" & caretaker %in% c('MTA', 'DPW'))
```

## Example 3

Only keep observations of oak and pine trees, then only keep columns "species", "legal_status", "plant_date", "latitude", and "longitude". For each tree, note whether it is an oak or a pine.

### Pseudocode

filter species select species, legal status, plant date, latitude, and longitude mutate new column for oak vs pine

### Functional code

```{r}
oak_pine_df <- sfo_trees_df %>%
  filter(str_detect(species, "Oak") | str_detect(species, "Pine")) %>%
  select("species", "legal_status", "plant_date", "latitude", "longitude") %>%
  mutate(type = ifelse(str_detect(species, 'Oak'), 'oak', 'pine'))
```

```{r}
oak_pine_plot <- ggplot(data = oak_pine_df, aes(x= longitude, 
                               y= latitude, 
                               color= type)) + 
  geom_point() + 
  theme_minimal() + 
  theme(axis.title = element_blank()) + 
  labs(color= "Tree Type", 
       caption = "Location of Oaks and Pines in San Francisco")
```

## Example 4

load a list of CA native species

```{r}
ca_native_df <- read_csv(here('data/sfo_trees/ca_native_spp.csv'))
```

How can we compare the CA native species to those in our SF trees database? Add a colmn noting whether a tree is native or not. We'll need the common and scientific names separated.

```{r}
sfo_trees_native <- sfo_trees_df %>%
  separate(species, into = c('spp_sci', 'spp_common'), sep = ' :: ') %>%
  select(starts_with('spp'), 'plant_date', 'legal_status', 'longitude', 'latitude') %>%
  mutate(ca_native = (spp_sci %in% ca_native_df$scientific_name))

sfo_native_status <- sfo_trees_native %>%
  group_by(legal_status, ca_native) %>%
  summarize(n_trees = n(), 
            n_species = n_distinct(spp_sci))
```
